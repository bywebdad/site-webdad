#!/usr/bin/env node

const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const config = {
  url: process.env.SITE_URL || 'http://localhost:3000',
  outputDir: './performance-reports',
  thresholds: {
    fcp: 1800, // First Contentful Paint
    lcp: 2500, // Largest Contentful Paint
    cls: 0.1,  // Cumulative Layout Shift
    fid: 100,  // First Input Delay
    ttfb: 600  // Time to First Byte
  }
};

// –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
if (!fs.existsSync(config.outputDir)) {
  fs.mkdirSync(config.outputDir, { recursive: true });
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Lighthouse
function runLighthouse() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏...');
  
  const timestamp = new Date().toISOString().replace(/[:.]/g, '-');
  const outputPath = path.join(config.outputDir, `lighthouse-${timestamp}.json`);
  
  try {
    const command = `npx lighthouse ${config.url} --output=json --output-path=${outputPath} --chrome-flags="--headless --no-sandbox" --only-categories=performance`;
    
    execSync(command, { stdio: 'inherit' });
    
    // –ß–∏—Ç–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    const raw = fs.readFileSync(outputPath, 'utf8');
    const parsed = JSON.parse(raw);
    return analyzeResults(parsed);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ Lighthouse:', error && error.message ? error.message : error);
    return null;
  }
}

// –ê–Ω–∞–ª–∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
function analyzeResults(results) {
  // Lighthouse v12 CLI –ø–∏—à–µ—Ç LHR –Ω–∞–ø—Ä—è–º—É—é (–∞ –Ω–µ { lhr: {...} })
  const lhr = results && results.lhr ? results.lhr : results;
  if (!lhr || !lhr.audits || !lhr.categories) {
    throw new Error('Invalid Lighthouse JSON format: missing audits/categories');
  }

  const getAudit = (id) => lhr.audits && lhr.audits[id];

  const fcp = getAudit('first-contentful-paint')?.numericValue ?? NaN;
  const lcp = getAudit('largest-contentful-paint')?.numericValue ?? NaN;
  const cls = getAudit('cumulative-layout-shift')?.numericValue ?? NaN;
  // –í –Ω–æ–≤—ã—Ö –≤–µ—Ä—Å–∏—è—Ö Lighthouse –º–µ—Ç—Ä–∏–∫–∞ –≤—Ö–æ–¥–Ω–æ–π –∑–∞–¥–µ—Ä–∂–∫–∏ –º–µ–Ω—è–ª–∞—Å—å
  const fid = getAudit('max-potential-fid')?.numericValue ?? getAudit('total-blocking-time')?.numericValue ?? NaN;
  const ttfb = getAudit('server-response-time')?.numericValue ?? NaN;
  const performanceScore = (lhr.categories.performance?.score ?? 0) * 100;

  const metrics = { fcp, lcp, cls, fid, ttfb, performanceScore };

  console.log('\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏:');
  console.log('==========================================');
  console.log(`üéØ –û–±—â–∏–π –±–∞–ª–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: ${metrics.performanceScore.toFixed(1)}/100`);
  console.log(`‚ö° First Contentful Paint: ${metrics.fcp.toFixed(0)}ms ${getStatus(metrics.fcp, config.thresholds.fcp)}`);
  console.log(`üñºÔ∏è  Largest Contentful Paint: ${metrics.lcp.toFixed(0)}ms ${getStatus(metrics.lcp, config.thresholds.lcp)}`);
  console.log(`üìê Cumulative Layout Shift: ${metrics.cls.toFixed(3)} ${getStatus(metrics.cls, config.thresholds.cls, true)}`);
  console.log(`üëÜ Max Potential FID: ${metrics.fid.toFixed(0)}ms ${getStatus(metrics.fid, config.thresholds.fid)}`);
  console.log(`üåê Time to First Byte: ${metrics.ttfb.toFixed(0)}ms ${getStatus(metrics.ttfb, config.thresholds.ttfb)}`);

  // –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é
  generateRecommendations(lhr, metrics);

  return metrics;
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –º–µ—Ç—Ä–∏–∫–∏
function getStatus(value, threshold, reverse = false) {
  if (Number.isNaN(value)) return '‚ùî';
  const isGood = reverse ? value <= threshold : value <= threshold;
  return isGood ? '‚úÖ' : '‚ùå';
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
function generateRecommendations(lhr, metrics) {
  console.log('\nüí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é:');
  console.log('==============================');

  const opportunities = lhr.audits || {};
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã
  if (metrics.ttfb > config.thresholds.ttfb) {
    console.log('üîß –ú–µ–¥–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
    console.log('   - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ middleware');
    console.log('   - –í–∫–ª—é—á–∏—Ç–µ –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —É—Ä–æ–≤–Ω–µ —Å–µ—Ä–≤–µ—Ä–∞');
    console.log('   - –†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ CDN');
  }

  if (metrics.lcp > config.thresholds.lcp) {
    console.log('üîß –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞:');
    console.log('   - –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–π—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (WebP, AVIF)');
    console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ preload –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤');
    console.log('   - –ú–∏–Ω–∏–º–∏–∑–∏—Ä—É–π—Ç–µ CSS –∏ JS');
  }

  if (metrics.cls > config.thresholds.cls) {
    console.log('üîß –ù–µ—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –º–∞–∫–µ—Ç–∞:');
    console.log('   - –ó–∞–¥–∞–π—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ –≤–∏–¥–µ–æ');
    console.log('   - –ò–∑–±–µ–≥–∞–π—Ç–µ –≤—Å—Ç–∞–≤–∫–∏ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –Ω–∞–¥ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º');
    console.log('   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ CSS aspect-ratio');
  }

  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
  if (opportunities['unused-css-rules'] && opportunities['unused-css-rules'].score < 1) {
    console.log('üîß –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π CSS –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏–µ');
  }

  if (opportunities['unused-javascript'] && opportunities['unused-javascript'].score < 1) {
    console.log('üîß –ù–µ–∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π JavaScript –æ–±–Ω–∞—Ä—É–∂–µ–Ω - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ code splitting');
  }

  if (opportunities['render-blocking-resources'] && opportunities['render-blocking-resources'].score < 1) {
    console.log('üîß –ë–ª–æ–∫–∏—Ä—É—é—â–∏–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ —Ä–µ—Å—É—Ä—Å—ã - –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ async/defer');
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
function startContinuousMonitoring(interval = 300000) { // 5 –º–∏–Ω—É—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
  console.log(`üîÑ –ó–∞–ø—É—Å–∫ –Ω–µ–ø—Ä–µ—Ä—ã–≤–Ω–æ–≥–æ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–∂–¥—ã–µ ${interval / 1000} —Å–µ–∫—É–Ω–¥`);
  
  setInterval(() => {
    runLighthouse();
  }, interval);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function main() {
  const args = process.argv.slice(2);
  
  if (args.includes('--continuous')) {
    const interval = parseInt(args[args.indexOf('--interval') + 1]) || 300000;
    startContinuousMonitoring(interval);
  } else {
    runLighthouse();
  }
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
if (require.main === module) {
  main();
}

module.exports = { runLighthouse, analyzeResults };
