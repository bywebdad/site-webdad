import { NextResponse } from "next/server";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendToTelegram(data: {
  name: string;
  email: string;
  phone?: string;
  message?: string;
  source: string;
  page?: string;
}) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const chatId = process.env.TELEGRAM_CHAT_ID;

  if (!botToken || !chatId) {
    console.warn('Telegram bot token or chat ID not configured');
    return;
  }

  const message = `üí¨ –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–∞–π—Ç–∞ webdad.by!

üë§ –ò–º—è: ${data.name}
üìß Email: ${data.email}${data.phone ? `\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}` : ''}
üìç –ò—Å—Ç–æ—á–Ω–∏–∫: ${data.source}${data.page ? `\nüåê –°—Ç—Ä–∞–Ω–∏—Ü–∞: ${data.page}` : ''}${data.message ? `\nüí≠ –°–æ–æ–±—â–µ–Ω–∏–µ: ${data.message}` : ''}
‚è∞ –í—Ä–µ–º—è: ${new Date().toLocaleString('ru-RU', { timeZone: 'Europe/Minsk' })}`;

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text: message,
        parse_mode: 'HTML',
      }),
    });

    if (!response.ok) {
      throw new Error(`Telegram API error: ${response.status}`);
    }

    console.log('Contact message sent to Telegram successfully');
  } catch (error) {
    console.error('Failed to send contact message to Telegram:', error);
  }
}

export async function POST(req: Request) {
  try {
    const data = await req.json();
    const { name, email, phone, message, page } = data ?? {};
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]{2,}$/i;

    if (!name || String(name).trim().length < 2) {
      return NextResponse.json({ error: "INVALID_NAME" }, { status: 400 });
    }
    if (!email || !emailRegex.test(String(email))) {
      return NextResponse.json({ error: "INVALID_EMAIL" }, { status: 400 });
    }

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram
    await sendToTelegram({
      name,
      email,
      phone,
      message,
      source: "contact_modal",
      page: page || (typeof window !== "undefined" ? window.location.href : undefined),
    });

    // –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
    console.log("CONTACT_FORM:", {
      name,
      email,
      phone,
      message,
      ts: new Date().toISOString(),
    });

    return NextResponse.json({ ok: true }, { status: 200 });
  } catch (e) {
    return NextResponse.json({ error: "SERVER_ERROR" }, { status: 500 });
  }
}
